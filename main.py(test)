import openpyxl, re
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ОБЪЯВЛЯЕМ ФУНКЦИИ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
def creating_template(nazvanie,razmer,material):
    item = 0
    item = re.sub('O-ring cord','Шнур круглого сечения',nazvanie)
    if item == nazvanie:
        item = re.sub('Oil Seal','Манжета армированная',nazvanie)
    if item == nazvanie:
        item = re.sub('O-ring','Кольцо круглого сечения',nazvanie)
    size = re.sub('x',r'\\D',razmer)
    size = re.sub('\*',r'\\D',razmer)
    return item + ' ' + material  + ' ' + size 
def creating_dont_search_string():
    global sheet_invoice
    sheet_invoice[coordinates] = "не найден"#записываем в ячейку в колонке G
    book_invoice.save("invoice.xlsx") #Сохраняем измененный файл
#начало функции searching
#функция принимает строку шаблон
#функция ищет подходящую под шаблон ячейку и возвращает ее номер
def searching(template):
    #global i_main
    r = 1
    c = 4
    #получаем количество строк на рабочем листе
    i = 701 #sheet_DB.max_row #не работает, присваиваю вручную количество строк в таблице DB
    #запускаем цикл поиска подходящей строки
    for row in range(1,i+1):
        #обнуляем переменную match в каждой итерации
        match = None
        #извлекаем из ячейки строку для сравнения
        print(sheet_DB.cell(row, column=c).value)
        print(row)
        #сравниваем строку в таблице "DB.xlsx" с шаблоном template
        match = re.search(template,sheet_DB.cell(row, column=c).value)
        print(match)
        #если строка найдена match не равен 0, то запускаем функцию creating_string_in_template_file() создания строки в файле moysklad.xlsx
        if match == None:
            #creating_dont_search_string()
            print('строка не найдена')
        if match != None:
            #creating_string_in_template_file()
            print('найдена строка')
    # Close the workbook after reading
    #book_DB.close()
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ТЕЛО MAIN @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
r=1
c=1
i_main = 0 #счетчик итераций для фукции searching()
new_forty_counter =1 #счетчик новых строк для файла template.xlsx
coordinates = 0 #переменная в которой хранятся координаты ячейки в формате-['A1']
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ОТКРЫВАЕМ ТАБЛИЦЫ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#открываем таблицу invoice.xlsx
book_invoice = openpyxl.load_workbook("invoice.xlsx")#открываем файл invoice.xlsx на чтение и запись
sheet_invoice = book_invoice.active
#открываем таблицу DB.xlsx для поиска в ней нужной строки
book_DB = openpyxl.load_workbook("DB.xlsx", read_only='true')
sheet_DB = book_DB.active
#открываем таблицу template.xlsx
book_template = openpyxl.load_workbook("DB.xlsx", read_only='true')
sheet_template = book_template.active
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ГЛАВНЫЙ ЦИКЛ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
for row in range(1,sheet_invoice.max_row+1):#получаем количество строк на рабочем листе +1 чтобы учесть последнюю строку
    i_main = i_main + 1
    #обнуляем new_string
    new_string =0
    nazvanie = sheet_invoice.cell(row, column=c).value
    razmer = sheet_invoice.cell(row, column=c+1).value
    material = sheet_invoice.cell(row, column=c+2).value
    coordinates = sheet_invoice.cell(row, column=c+6).coordinate
    #создаем шаблон-строку для поиска по БД на основе файла invoice.xlsx 
    template = creating_template(nazvanie,razmer,material)
    print(template)
    print(type(template))
    #запускаем функцию поиска строки, которая соответствует шаблону-строке в файле DB.xlsx
    new_string = searching(template)
    #открываем на запись файл-шаблон для импорта счета в мой склад
    #запускаем функцию которая создаст шаблон из строки инвойса
    #передадим шаблон в функцию поиска в базе мой склад
    #если в базе есть строка соответствующая шаблону запустим функцию записи в файл-шаблон мой склад
    if new_string != 0:
        #создаем координаты для файла template.xlsx
        coordinates_kod = sheet_template.cell(row = new_forty_counter, column = 3).coordinate
        creating_string_in_template_file(new_string)
        new_forty_counter = new_forty_counter + 1
    else:
        #если строка не найдена запустим функцию записи состоянии не нашел
        creating_dont_search_string()
        book_invoice.save("invoice.xlsx") #Сохраняем измененный файл
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ЗАКРЫВАЕМ ФАЙЛЫ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
book_invoice.close()
book_DB.close()
book_template.close()
print("Работа программы завершена")
